#!/bin/sh

############################################################################### 
# # This tool outputs settings for Carbon Lite player.  
# Use: 
#  ./rpiv
#
###############################################################################




# In the future, these settings will be automatically configured based on which 
# company or player grouping is being tested. For now, set these manually. 
#
# Change to YES to enable each test:

DHCP_TEST=YES
HOSTNAME_TEST=YES
DATETIME_TEST=YES
NTP_TEST=YES
TIMESYNCD_TEST=YES
FTP_TEST=YES
HAMACHI_TEST=YES
DNS_TEST=YES

# Set FTP password here if you don't want to enter it on cmd line.
# Default: empty
FTPPASS=password1



# In the future, these settings will be automatically configured based on which 
# company or player grouping is being tested. For now, set these manually. 


export HOSTNAME=$(hostname)
export FQDN=$(hostname).theatre.reg
export DOMAIN=theatre.reg
export IP=$(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)
export DHCP_ENABLED=$(grep IP /etc/netctl/ethernet-dhcp | grep -v '^#')
#export FTPSTATUS=$(systemctl status vsftp | grep Active | awk '{print $2}')
export RESOLVER=$(grep nameserver /etc/resolv.conf | grep -v "^#" | awk '{print $2}')
export DNSAUTHSRV=$(drill -4 @$RESOLVER $DOMAIN NS | grep -v '^\;\|^$' | grep -v 'NS\|AAAA' | tail -1 | awk '{print $5}')

########################
# FUNCTIONS TO BE MOVED
########################

check_svc() {
SVC=$1
ESTATUS=$(systemctl is-enabled $SVC)
ASTATUS=$(systemctl is-active $SVC)
if [ "$ESTATUS" = "enabled" ]; then
	echo "$SVC is $ESTATUS."
	echo "$SVC is $ASTATUS."

else 
	echo "$ESTATUS"
fi
}


test_dns() {
	RESOLVER=$(grep nameserver /etc/resolv.conf | grep -v "^#" | awk '{print $2}')
	DNSAUTH=$(drill -4 @$RESOLVER $DOMAIN NS | grep -v '^\;\|^$\|AAAA' | tail -1 | awk '{print $5}')
	echo "Domain Name: $DOMAIN"
	echo "Resolver: $RESOLVER"
	echo "Authoritative Server: $DNSAUTH"
	echo " "
	echo " "
	echo "Querying auth server..."
	drill @$DNSAUTH $FQDN | grep -v '^\;\|^$'

	# If I can ever get a multiline array working in bash, I can grab the repsonse code too.
	# grep rcode | cut -f2 -d, | sed s/^.//

	echo "Querying local resolver..."
	drill @$RESOLVER $FQDN | grep -v '^\;\|^$'

}

remove_ftptestfile() {
	if [ -e /srv/ssh/jail/ftptest.txt ]; then
		echo "FTP Test file already exists in destination."
		echo -n "Enter sudo password to remove the file: "; read SUDOPASS
		if ! "echo $SUDOPASS | sudo -S rm /srv/ssh/jail/ftptest.txt"; then
			echo $?
			echo "We may have a problem. Trying again. "
			echo " "
			remove_ftptestfile

		else
			echo $?
		fi
	fi
}

test_ftp() {
	if [ ! -e /usr/bin/lftp ]; then
		echo "The lftp program is not installed."
		echo "Please test FTP manually."
		echo " "
		return 1;
	fi
	if [ -z "$FTPPASS" ]; then
		echo -n "Enter FTP password for username 'administrator': "; read FTPPASS
	fi
	remove_ftptestfile
	echo "Creating /tmp/ftptest.txt..."
	touch /tmp/ftptest.txt
	echo "Testing FTP upload to localhost."
	lftp -c "set net:max-retries 2; open -u administrator,$FTPPASS localhost; put /tmp/ftptest.txt"
	if [ -e /srv/ssh/jail/ftptest.txt ]; then
		echo "FTP works. Cleaning up."
		rm /tmp/ftptest.txt
		#rm /tmp/.ftp.tmp
	else
		echo "Unable to complete FTP test. Please check for /srv/ssh/jail/ftptest.txt "
		echo "or test FTP connection to this RPi manually."
	fi

}

clear

# DHCP_TEST
if [ $DHCP_TEST = "YES" ]; then
	echo "Checking DHCP setting in Netctl Profile..."
	DHCP_ENABLED=$(grep IP /etc/netctl/ethernet-dhcp | grep -v '^#')
	if [ "$DHCP_ENABLED" = 'IP=dhcp' ]; then
		echo "Found '$DHCP_ENABLED' in /etc/netctl/ethernet-dhcp."
		echo "System appears to be configured for DHCP."
		echo "The current IP is $IP."
		echo " "
	else
		echo "DHCP does not appear to be configured for DHCP in netctrl profile." 
		echo "The current IP is $IP."
		echo " " 
	fi
else	
	echo "DHCP test is disabled. Skipping..."
fi


# HOSTNAME_TEST
if [ $HOSTNAME_TEST = "YES" ]; then
	echo "Checking hostname..."
	if [ "$HOSTNAME" = "$FQDN" ]; then
		echo $HOSTNAME is fully qualified.
		echo " " 
	else 
		echo $HOSTNAME is not fully qualified
		echo "Please run 'hostnamectl set-hostname $HOSTNAME.$DOMAIN'"
		echo " "
	fi
else
	echo "Hostname test is disabled. Skipping..."
fi




# DATETIME_TEST 

if [ "$DATETIME_TEST" = "YES" ]; then
	echo Checking time/date and ntp settings...
	echo " "
	timedatectl
	echo " "
else
	echo Date/Time Test is disabled. Skipping...
fi

# NTP_TEST 
if [ $NTP_TEST = "YES" ]; then
	echo "Checking NTPD..."
	check_svc ntpd
	echo " "
else
	echo "NTPD test is disabled. Skipping..."
fi

# TIMESYNC_TEST 
if [ $TIMESYNCD_TEST = "YES" ]; then
	echo "Checking Timesyncd..."
	check_svc systemd-timesyncd
	echo " "
else
	echo "Timesync test is disabled. Skipping..."
fi



# FTP_TEST
if [ "$FTP_TEST" = "YES" ]; then
	echo "Checking FTP daemon..."
	check_svc vsftpd
	if [ "$ASTATUS" = "active" ]; then
		test_ftp	
		#echo "The vsftpd daemon is running."
		#echo "Please attempt to transfer a file to $IP."
	else
		echo "The vsftpd service is not running. Skipping FTP test."
	fi
	echo " "
else
	echo "FTP test is disabled. Skipping..."
fi

# HAMACHI_TEST 
if [ "$HAMACHI" = "YES" ]; then
	echo Checking Hamachi...
	echo "Hamachi test is not (yet) available. Skipping..."
	echo " "
else
	echo "Hamachi test is disabled. Skipping..."
fi

# DNS_TEST 
if [ "$DNS_TEST" = "YES" ]; then
	echo "Checking DNS..."
	test_dns
	echo " "
else
	echo "DNS test is disabled. Skipping..."
fi



echo "Test complete."

